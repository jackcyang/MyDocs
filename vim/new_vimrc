" -----------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
" -----------------------------------------------------------------------------
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif

" -----------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
" -----------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif


" -----------------------------------------------------------------------------
"  < Vundle 插件管理工具配置 >
" -----------------------------------------------------------------------------
" 用于更方便的管理vim插件，具体用法参考 :h vundle 帮助
" 安装方法为在终端输入如下命令
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" 如果想在 windows 安装就必需先安装 "git for window"，可查阅网上资料

set nocompatible                                      "禁用 Vi 兼容模式
filetype off                                          "禁用文件类型侦测

if g:islinux
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
else
    set rtp+=$HOME/_vim/bundle/vundle/
    call vundle#rc('$HOME/_vim/bundle/')
endif

" 使用Vundle来管理Vundle，这个必须要有。
 Bundle 'gmarik/vundle'

" 以下为要安装或更新的插件，不同仓库都有（具体书写规范请参考帮助）
"  Bundle 'vim-easy-align'
"  Bundle 'Yggdroot/indentLine'
"  Bundle 'kien/ctrlp.vim'
"  Bundle 'Shougo/neocomplcache'
"  Bundle 'Shougo/neosnippet'
"  Bundle 'Shougo/neosnippet-snippets'
"  Bundle 'scrooloose/nerdtree'
"  Bundle 'jistr/vim-nerdtree-tabs'
"  Bundle 'tpope/vim-surround'
"  Bundle 'Rykka/colorv.vim'
"  Bundle 'bling/vim-airline'
"  Bundle 'Emmet.vim'
"  Bundle 'tComment'
"  Bundle 'repeat.vim'
"  Bundle 'syntastic'
"  Bundle 'tagbar'

" -----------------------------------------------------------------------------
"  < 一般设置 >
" -----------------------------------------------------------------------------
set history=1000

" 启用文件类型侦测
" filetype on
" 针对不同的文件类型加载对应的插件
filetype plugin on

" 设置 mapleader 为,
let mapleader = ","
let g:mapleader = ","

" -----------------------------------------------------------------------------
"  < 编码配置 >
" -----------------------------------------------------------------------------
" 注：使用utf-8格式后，软件与程序源码、文件路径不能有中文，否则报错
set encoding=utf-8                                    "设置gvim内部编码
set fileencoding=utf-8                                "设置当前文件编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1     "设置支持打开的文件的编码

" 文件格式，默认 ffs=dos,unix
set fileformat=unix                                   "设置新文件的<EOL>格式
set fileformats=unix,dos,mac                          "给出文件的<EOL>格式类型

"if (g:iswindows && g:isGUI)
"    "解决菜单乱码
"    source $VIMRUNTIME/delmenu.vim
"    source $VIMRUNTIME/menu.vim
"
"    "解决consle输出乱码
"    language messages zh_CN.utf-8
"endif

" -----------------------------------------------------------------------------
"  < 用户界面 >
" -----------------------------------------------------------------------------
" 命令使用宽菜单
set wildmenu

" 忽略以下的文件类型
set wildignore+=*.o,*~,*.pyc,.*.swp

" 显示标尺
set ruler

" 设置命令行的高度为2，默认为1
set cmdheight=2

" 启用状态栏信息
set laststatus=2

" 状态栏显示信息
set statusline=%n\                                  "缓冲区号
set statusline+=%f\ %LL\                            "缓冲区中的文件路径，文件总行数
set statusline+=%h%m%r%w\                           "显示 帮助，已修改，只读，预览 等状态标记
set statusline+=\|\ %<%{getcwd()}\                  "当前工作目录
set statusline+=%=[%{strlen(&ft)?&ft:'no\ ft'},\    "文件类型
set statusline+=%{&fenc},\                          "文件编码
set statusline+=%{&fileformat}]\                    "文件格式
set statusline+=%4{&bomb?'[BOM]':''}\               "BOM标记
set statusline+=%-4.(\ %)                           "增加间距
set statusline+=%-14.(%b,0x%-4.8B%)\                "光标下字符的十进制,十六进制表示
set statusline+=%-10.(%l,%c%V%)\ %P                 "行，列及光标所在位置百分比

" 显示行号
set number

" 显示相对行号
set relativenumber

" 上下可视行数
set scrolloff=7

" 突出显示当前行
set cursorline

" 设置不自动换行
set nowrap

" 去掉欢迎界面
set shortmess=atI

" 搜索时忽略大小写
set ignorecase

" 搜索时尝试智能设定大小写敏感性
set smartcase

" 高亮搜索结果
set hlsearch

" 实时匹配要搜索的文字
set incsearch

" 禁用循环搜索
set nowrapscan

" 在执行宏操作时不重绘（延迟重绘，提升性能）
set lazyredraw

" 关闭错误提示音
set noerrorbells
set novisualbell
set vb t_vb=

" 设定在插入状态可以用 Backspace 和 Delete 键删除
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

"" 设置 gVim 窗口初始位置及大小
"if g:isGUI
"    " au GUIEnter * simalt ~x                           "窗口启动时自动最大化
"    winpos 100 10                                     "指定窗口出现的位置，坐标原点在屏幕左上角
"    set lines=38 columns=120                          "指定窗口大小，lines为高度，columns为宽度
"endif
"
"" 设置代码配色方案
"if g:isGUI
"    colorscheme Tomorrow-Night-Eighties               "Gvim配色方案
"else
"    colorscheme Tomorrow-Night-Eighties               "终端配色方案
"endif
"
"" 显示/隐藏菜单栏、工具栏、滚动条，可用 Ctrl + F11 切换
"if g:isGUI
"    set guioptions-=m
"    set guioptions-=T
"    set guioptions-=r
"    set guioptions-=L
"    map <silent> <c-F11> :if &guioptions =~# 'm' <Bar>
"        \set guioptions-=m <Bar>
"        \set guioptions-=T <Bar>
"        \set guioptions-=r <Bar>
"        \sed guioptions-=L <Bar>
"    \else <Bar>
"        \set guioptions+=m <Bar>
"        \set guioptions+=T <Bar>
"        \set guioptions+=r <Bar>
"        \set guioptions+=L <Bar>
"    \endif<CR>
"endif

" -----------------------------------------------------------------------------
"  < 颜色与字体 >
" -----------------------------------------------------------------------------
" 设置语法高亮
syntax enable

" 主题配色方案
colorscheme desert
set background=dark

" -----------------------------------------------------------------------------
"  < 文件与备份 >
" -----------------------------------------------------------------------------
" 保存文件前建立备份，保存成功后删除该备份
set writebackup

" 设置无备份文件
set nobackup

" 设置无临时文件
" set noswapfile

" -----------------------------------------------------------------------------
"  < 文本与缩进 >
" -----------------------------------------------------------------------------
" 启用智能对齐方式(smartindent 对 python 的注释缩进有问题，建议不启用)
"set smartindent

" 启用缩进
" filetype plugin indent on
filetype indent on

" 将Tab键转换为空格
set expandtab

" 设置Tab键的宽度
set tabstop=4

" 换行时自动缩进4个空格
set shiftwidth=4

" 指定按一次backspace就删除shiftwidth宽度的空格
set smarttab

" 光标超过设置的列数时断行
"set textwidth=80
" 好像没作用
"set wrap

" 断行时不截断单词
set linebreak

" 启用折叠
set foldenable

" indent 折叠方式
set foldmethod=indent
" set foldmethod=marker

" 用空格键来开关当前折叠
nnoremap <space> za

" -----------------------------------------------------------------------------
"  < 按键 Mappings >
" -----------------------------------------------------------------------------
" 将一行长文本当成多行文本来移动光标
map j gj
map k gk

" 重新设置定位行首非空字符的按键
map 0 ^

" 关闭搜索结果高亮显示
map <silent> <leader>nh :nohlsearch<cr>

" 常规模式下输入 cS 清除行尾空格
nnoremap cS :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下输入 cM 清除行尾 ^M 符号
nnoremap cM :%s/\r$//g<CR>:noh<CR>

"用<c-k,j,h,l>在插入模式下移动光标
imap <c-k> <Up>
imap <c-j> <Down>
imap <c-h> <Left>
imap <c-l> <Right>

" 常规模式下<c-h,l>在tab窗口间跳转
nnoremap <c-h> :tabp<CR>
nnoremap <c-l> :tabn<CR>

" 上下移动行或选中的行
nmap <C-j> mz:m+<cr>`z
nmap <C-k> mz:m-2<cr>`z
vmap <C-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" -----------------------------------------------------------------------------
"  < 编写文件时的配置 >
" -----------------------------------------------------------------------------
" 当文件在外部被修改，自动更新该文件
set autoread

" 自动切换目录为当前编辑文件所在目录
"autocmd BufEnter * silent! cd %:p:h
set autochdir

set showcmd		" display incomplete commands



" -----------------------------------------------------------------------------
"  < 其它配置 >
" -----------------------------------------------------------------------------






