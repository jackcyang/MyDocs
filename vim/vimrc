" -----------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
" -----------------------------------------------------------------------------
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif

" -----------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
" -----------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif


" -----------------------------------------------------------------------------
"  < Vundle 插件管理工具配置 >
" -----------------------------------------------------------------------------
" 用于更方便的管理vim插件，具体用法参考 :h vundle 帮助
" 安装方法为在终端输入如下命令
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" 如果想在 windows 安装就必需先安装 "git for window"，可查阅网上资料

set nocompatible                                      "禁用 Vi 兼容模式
filetype off                                          "禁用文件类型侦测

if g:islinux
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
else
    set rtp+=$HOME/_vim/bundle/vundle/
    call vundle#rc('$HOME/_vim/bundle/')
endif

" 使用Vundle来管理Vundle，这个必须要有。
Bundle 'gmarik/vundle'

" 以下为要安装或更新的插件，不同仓库都有（具体书写规范请参考帮助）
Bundle 'vim-easy-align'
Bundle 'Yggdroot/indentLine'
Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippet'
Bundle 'Shougo/neosnippet-snippets'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-surround'
Bundle 'Rykka/colorv.vim'
Bundle 'mattn/emmet-vim'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'Glench/Vim-Jinja2-Syntax'
Bundle 'alvan/vim-php-manual'
Bundle 'editorconfig/editorconfig-vim'
" Bundle 'bsdelf/bufferhint'
" Bundle 'easymotion/vim-easymotion'
Bundle 'tComment'
Bundle 'repeat.vim'
Bundle 'syntastic'
Bundle 'tagbar'
Bundle 'BufOnly.vim'

" -----------------------------------------------------------------------------
"  < 一般设置 >
" -----------------------------------------------------------------------------
set history=1000

" 启用文件类型侦测
filetype on

" 针对不同的文件类型加载对应的插件
filetype plugin on

" 设置 mapleader 为,
let mapleader = ","
let g:mapleader = ","

" -----------------------------------------------------------------------------
"  < 编码配置 >
" -----------------------------------------------------------------------------
" 注：使用utf-8格式后，软件与程序源码、文件路径不能有中文，否则报错
" vim内部编码
set encoding=utf-8                                    

" 当前文件编码
set fileencoding=utf-8                                

" 支持打开的文件的编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1     

" 当encoding为utf-8时，将CJK字符按双字节显示
set ambiwidth=double

" 文件格式，默认 ffs=dos,unix
" 设置新文件的<EOL>格式
set fileformat=unix                                   

" 给出文件的<EOL>格式类型
set fileformats=unix,dos,mac                          

" window 中 GUI 界面乱码问题
if (g:iswindows && g:isGUI)
    "解决菜单乱码
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim

    "解决consle输出乱码
    language messages zh_CN.utf-8
endif

" -----------------------------------------------------------------------------
"  < 用户界面 >
" -----------------------------------------------------------------------------
" 去掉欢迎界面
set shortmess=atI

" 显示标尺
set ruler

" 显示行号
set number

" 显示相对行号
if exists('+relativenumber')
    set relativenumber
endif

" 上下可视行数
set scrolloff=3

" 突出显示当前行
set cursorline

" 忽略以下的文件类型
set wildignore+=*.o,*~,*.pyc,.*.swp

" 设置命令行的高度为2，默认为1
" set cmdheight=2

" 命令使用宽菜单
set wildmenu

" 显示完整命令
set showcmd		

" 启用状态栏信息
set laststatus=2

" 状态栏显示信息
set statusline=%n\                                  "缓冲区号
set statusline+=%f\ %LL\                            "缓冲区中的文件路径，文件总行数
set statusline+=%h%m%r%w\                           "显示 帮助，已修改，只读，预览 等状态标记
set statusline+=\|\ %<%{getcwd()}\                  "当前工作目录
set statusline+=%=[%{strlen(&ft)?&ft:'no\ ft'},\    "文件类型
set statusline+=%{&fenc},\                          "文件编码
set statusline+=%{&fileformat}]\                    "文件格式
set statusline+=%4{&bomb?'[BOM]':''}\               "BOM标记
set statusline+=%-4.(\ %)                           "增加间距
set statusline+=%-14.(%b,0x%-4.8B%)\                "光标下字符的十进制,十六进制表示
set statusline+=%-10.(%l,%c%V%)\ %P                 "行，列及光标所在位置百分比
" Syntastic 显示错误信息
set statusline+=\ %#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" 关闭错误提示音
set noerrorbells
set novisualbell
set vb t_vb=

" 启用鼠标支持
if has("mouse")
    set mouse=a
endif

" gVim 窗口初始位置，大小，字体及菜单等设置
if g:isGUI
    if g:iswindows
        " 窗口启动时自动最大化
        autocmd GUIEnter * simalt ~x                           
        set guifont=DejaVu_Sans_Mono:h11:cANSI
    else
        " 指定窗口出现的位置，坐标原点在屏幕左上角
        winpos 100 10                                     

        " 指定窗口大小，lines为高度，columns为宽度
        set lines=38 columns=120                          
        set guifont=DejaVu\ Sans\ Mono\ 11
    endif
    
    "默认隐藏菜单栏、工具栏、左右滚动条
    set guioptions-=m
    set guioptions-=T
    set guioptions-=L
    set guioptions-=r

    " <F9> 切换显示/隐藏菜单栏、工具栏
    noremap <F9> :call Toggle_menu_toolbar()<cr>
    function Toggle_menu_toolbar()
        if &guioptions =~# 'T'
            set guioptions-=T
            set guioptions-=m
        else
            set guioptions+=T
            set guioptions+=m    
        endif
    endfunction
endif

" -----------------------------------------------------------------------------
"  < 颜色与字体 >
" -----------------------------------------------------------------------------
" 设置语法高亮
syntax enable

" 主题配色方案
colorscheme molokai
set t_Co=256
" let g:molokai_original=1
set background=dark

" -----------------------------------------------------------------------------
"  < 文件与备份 >
" -----------------------------------------------------------------------------
" 保存文件前建立备份，保存成功后删除该备份
set writebackup

" 设置无备份文件
set nobackup

" 设置无临时文件
" set noswapfile

" -----------------------------------------------------------------------------
"  < 文本与缩进 >
" -----------------------------------------------------------------------------
" 启用智能对齐方式(smartindent 对 python 的注释缩进有问题，建议不启用)
"set smartindent

" 启用缩进
filetype indent on

" 将Tab键转换为空格
set expandtab

" 设置Tab键的宽度
set tabstop=4

" 换行时自动缩进4个空格
set shiftwidth=4

" 指定按一次backspace就删除shiftwidth宽度的空格
set smarttab

" 光标超过设置的列数时断行
"set textwidth=80

" 设置自动换行
" set wrap

" 断行时不截断单词
set linebreak

" 在100列处显示高亮显示
set colorcolumn=100

" 开启断行对亚洲语言的支持。m表示允许在汉字之间断行，B表示合并行时不在汉字中间补充空格。
set formatoptions+=mB

" 启用折叠
set foldenable

" indent 折叠方式
set foldmethod=indent
" set foldmethod=marker

" 用空格键来开关当前折叠
noremap <space> za

" -----------------------------------------------------------------------------
"  < 编写文件时的配置 >
" -----------------------------------------------------------------------------
" 当文件在外部被修改，自动更新该文件
set autoread

" 自动切换目录为当前编辑文件所在目录
set autochdir

" 搜索时忽略大小写
set ignorecase

" 搜索时尝试智能设定大小写敏感性
set smartcase

" 高亮搜索结果
set hlsearch

" 实时匹配要搜索的文字
set incsearch

" 禁用循环搜索
set nowrapscan

" 在执行宏操作时不重绘（延迟重绘，提升性能）
set lazyredraw

" 设定在插入状态可以用 Backspace 和 Delete 键删除
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" -----------------------------------------------------------------------------
"  < 一般按键 Mappings >
" -----------------------------------------------------------------------------
" 简化退出与保存操作
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w!<CR>

" 简化系统剪贴板的复制粘贴 TODO:感觉复制还有点问题
nnoremap <Leader>y "+y
vnoremap <Leader>y "+y
nnoremap <Leader>p "+gp
nnoremap <Leader>P "+gP

" 常规模式下清除行尾空格
nnoremap <Leader>cs :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下清除行尾 ^M 符号
nnoremap <Leader>cm :%s/\r$//g<CR>:noh<CR>

" 关闭搜索结果高亮显示
noremap <silent> <leader>h :nohlsearch<cr>

" 用<c-j,k,h,l>在插入模式下移动光标
inoremap <c-j> <Down>
inoremap <c-k> <Up>
inoremap <c-h> <Left>
inoremap <c-l> <Right>

" 常规模式下<c-j,k,h,l>在窗口间跳转
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Alt加j,k键上下移动行或选中的行
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" -----------------------------------------------------------------------------
"  < 其它配置 >
" -----------------------------------------------------------------------------
autocmd BufNewFile,BufRead *.twig set filetype=jinja
autocmd BufNewFile,BufRead *.module,*.theme,*.install,*.test,*.inc,*.profile,*.view set filetype=php

" 读取项目相关配置，覆盖通用配置
let project_vimrc = findfile('.project.vim', '.;')
if filereadable(project_vimrc)
    execute 'source' . fnameescape(project_vimrc)
    " execute 'sandbox source' . fnameescape(project_vimrc)
endif



" =============================================================================
"                          << 常用工具配置 >>
" =============================================================================

" ctags 工具
set tags=tags;

" 生成 ctags 文件，需要转到项目根目录再生成
nnoremap <Leader>ct :!ctags --langmap=php:.engine.inc.module.theme.install.php --php-kinds=cdfi --languages=php --recurse<CR>

" gvimfullscreen 工具，用于 Windows Gvim 全屏窗口，可用 F11 切换
if (g:iswindows && g:isGUI)
    noremap <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
endif



" =============================================================================
"                          << 插件详细配置 >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < vim-easy-align 插件配置 >
" -----------------------------------------------------------------------------
" 一个对齐的插件，用来排版与对齐代码
vnoremap <silent> <Enter> :EasyAlign<cr>

" -----------------------------------------------------------------------------
"  < indentLine 插件配置 >
" -----------------------------------------------------------------------------
" 用于显示对齐线，与 indent_guides 在显示方式上不同，根据自己喜好选择了
" 在终端上会有屏幕刷新的问题，这个问题能解决有更好了
" 开启/关闭对齐线
nnoremap <leader>i :IndentLinesToggle<CR>

" 设置Gvim的对齐线样式
if g:isGUI
    let g:indentLine_char = "|"
    let g:indentLine_first_char = "|"
endif

" 设置终端对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
" let g:indentLine_color_term = 239

" 设置 GUI 对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
" let g:indentLine_color_gui = '#A4E57E'

" -----------------------------------------------------------------------------
"  < ctrlp 插件配置 >
" -----------------------------------------------------------------------------
let g:ctrlp_root_markers = ['tags']
let g:ctrlp_match_window = 'bottom,order:btt,min:5,max:20,result:20'


" -----------------------------------------------------------------------------
"  < neocomplcache 插件配置 >
" -----------------------------------------------------------------------------
" 关键字补全、文件路径补全、tag补全等等，各种，非常好用，速度超快。
let g:neocomplcache_enable_at_startup = 1     "vim 启动时启用插件
" let g:neocomplcache_disable_auto_complete = 1 "不自动弹出补全列表
" 在弹出补全列表后用 <c-p> 或 <c-n> 进行上下选择效果比较好
imap <expr><TAB>  pumvisible() ? "\<c-n>" : "\<TAB>"   "用 tab 键向下选择
imap <expr><s-TAB>  pumvisible() ? "\<c-p>" : "\<s-TAB>"   "用 shift + tab 键向上选择

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

" -----------------------------------------------------------------------------
"  < neosnippet 插件配置 >
" -----------------------------------------------------------------------------
" 用 Enter 键展开代码片段
imap <expr><Enter> neosnippet#expandable() ?
\ "\<Plug>(neosnippet_expand)" : "\<Enter>"

" 用 TAB 键在展开的代码中移动光标
imap <expr><TAB> neosnippet#jumpable() ?
\ "\<Plug>(neosnippet_jump)"
\ : pumvisible() ? "\<c-n>" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" -----------------------------------------------------------------------------
"  < tComment 插件配置 >
" -----------------------------------------------------------------------------
" 以下为插件常用默认快捷键

" 常规模式下
"     gcc 注释/取消注释当前行
"     gc{motion}  注释/取消注释{motion}内容
"     gCc 注释当前行
"     gC{motion} 注释{motion}内容
"
" 可视模式下:
"     gc  注释/取消注释选中的区域
"     gC  注释选中的区域

nmap <Leader>m gcc
vmap <Leader>m gc

" -----------------------------------------------------------------------------
"  < nerdtree 插件配置 >
" -----------------------------------------------------------------------------
" 有目录村结构的文件浏览插件
let NERDTreeWinSize = 31
" 常规模式下输入 <Leader>l 调用插件
nmap <Leader>l :NERDTreeToggle<CR>

" -----------------------------------------------------------------------------
"  < minibufexpl 插件配置 >
" -----------------------------------------------------------------------------
" 切换显示／隐藏 Minibufexpl 窗口
nnoremap <Leader>b :MBEToggle<CR>
" 删除当前 buffer
nnoremap <Leader>bd :MBEbd<CR>
" Alt 加 h, l 键左右切换 buffer
noremap <m-l> :MBEbn<CR>
noremap <m-h> :MBEbp<CR>

" -----------------------------------------------------------------------------
"  < repeat 插件配置 >
" -----------------------------------------------------------------------------
" 主要用"."命令来重复上次插件使用的命令

" -----------------------------------------------------------------------------
"  < surround 插件配置 >
" -----------------------------------------------------------------------------
" 快速给单词/句子两边增加符号（包括html标签），缺点是不能用"."来重复命令
" 不过 repeat 插件可以解决这个问题，详细帮助见 :h surround.txt

" -----------------------------------------------------------------------------
"  < Syntastic 插件配置 >
" -----------------------------------------------------------------------------
" 用于保存文件时查检语法
" 在打开文件的时候检查
let g:syntastic_check_on_open = 1
" 将错误列表填充到location list中，方面向前向后跳转
let g:syntastic_always_populate_loc_list = 1
" phpcs，tab 4个空格，编码参考使用CodeIgniter风格
" let g:syntastic_phpcs_conf = "--tab-width=4"
" 打开错误列表，并将光标移动到错误列表中
nnoremap <Leader>e :Errors<CR> <c-w>j
" 直接在源文件中前后定位错误位置
nnoremap <Leader>j :lnext<cr>
nnoremap <Leader>k :lprev<cr>

" -----------------------------------------------------------------------------
"  < Tagbar 插件配置 >
" -----------------------------------------------------------------------------
" 相对 TagList 能更好的支持面向对象
let g:tagbar_width=40                       "设置窗口宽度
nnoremap <Leader>t :TagbarToggle<CR>

" -----------------------------------------------------------------------------
"  < vim-php-manual 插件配置 >
" -----------------------------------------------------------------------------
"关闭在线查找帮助手册，默认是ctrl + h
let g:php_manual_online_search_shortcut = ''

" -----------------------------------------------------------------------------
"  < Bufonly 插件配置 >
" -----------------------------------------------------------------------------
" 删除其他buffers
nnoremap <Leader>bo :BufOnly<cr>

" 安全设置
set secure
